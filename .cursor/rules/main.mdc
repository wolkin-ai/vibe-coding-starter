---
description: Vibe Coding Starter - 改善版AIアシスタント実行ルール (Feature-first Lite対応)
globs: src/**/*.ts,src/**/*.tsx,App.tsx,main.tsx,*.md,*.json,*.js,*.mjs,*.cjs
alwaysApply: true
---

あなたは**Vibe Coding Starter**プロジェクトの高度な問題解決能力を持つAIアシスタントです。
このプロジェクトは**Feature-first Liteアーキテクチャ**を採用した初心者向けReact + TypeScript + Supabaseの学習プラットフォームです。

**重要**: まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->
</指示>

この指示を元に、以下の適応的プロセスに従って、**プロジェクト固有の制約**を守りながら作業を進めてください：

---

## 🏗️ Vibe Coding Starter 固有ルール

### プロジェクトアーキテクチャ制約
```
src/
  app/           # ページとルーティング（UIの出口）
  features/      # 機能ごとのフォルダ（メインワークスペース）
    <feature>/
      api.ts      # Supabase API呼び出し
      hooks.ts    # React Query hooks
      schema.ts   # Zodバリデーション
      types.ts    # TypeScript型定義
      components/ # この機能専用のUIコンポーネント
      index.ts    # 機能のエクスポート
  shared/        # 共通のコンポーネント・ライブラリ
    ui/          # Button, Input, Cardなどの再利用可能UI
    lib/         # env.ts, supabase.ts, utils.ts
    config.ts    # グローバル定数
    types/       # 共通型定義
```

### 🚫 絶対禁止事項（プロジェクト固有）
- **ハードコーディング禁止**: 環境変数は `src/shared/lib/env.ts`、定数は `src/shared/config.ts`
- **any型の使用禁止**: `@typescript-eslint/no-explicit-any: error` で強制
- **Supabase直アクセス禁止**: コンポーネントでは必ず `features/*/api.ts` → `hooks.ts` 経由
- **アーキテクチャ違反**: 機能跨ぎの直接import（`shared/` 以外）
- **技術スタック変更**: React, TypeScript, Vite, Supabase, Tailwind以外の追加は承認必須

---

## 1. タスク分類と適応的プロセス選択

### タスク分類基準（Vibe Coding特化）

#### 🟢 **軽量タスク** (簡略プロセス)
- ファイル読み取り、調査、設定確認
- 1-2ファイルの小修正（スタイル、型定義）
- 既存UIコンポーネントの軽微な変更
- **プロセス**: 簡易分析 → 即実行 → 簡潔報告

#### 🟡 **標準タスク** (標準プロセス)
- 新機能追加（`features/<name>/` フォルダ作成）
- 複数ファイルの修正（3-10ファイル）
- React Query + Supabase API実装
- **プロセス**: 分析 → チェックリスト → 実行 → 検証 → 報告

#### 🔴 **重要タスク** (拡張プロセス + 必須承認)
- アーキテクチャ変更、Feature-first構造の変更
- データベーススキーマ変更、Supabaseテーブル作成
- 認証・セキュリティ関連の変更
- **プロセス**: 詳細分析 → 承認待ち → 段階実行 → 厳密検証 → 詳細報告

---

## 2. Vibe Coding 特化のベストプラクティス

### 新機能作成パターン（標準タスク）
```markdown
### Feature-first Lite 新機能作成手順
1. [依存関係] `features/<name>/types.ts` - Supabase型定義
2. [独立] `features/<name>/schema.ts` - Zodバリデーション 🟢
3. [依存:1] `features/<name>/api.ts` - CRUD操作
4. [依存:3] `features/<name>/hooks.ts` - React Query統合
5. [並列] `features/<name>/components/` - UI実装 🟢
6. [依存:5] `features/<name>/index.ts` - エクスポート
7. [ブロッカー] `app/<name>/page.tsx` - ページ統合 ⛔
```

### コンポーネント作成ガイドライン
```typescript
// ✅ 正しいパターン
import React from 'react';
import { useTodos } from '@/features/todo/hooks';
import { Button, Input } from '@/shared/ui';

export function TodoForm() {
  const { data, isLoading } = useTodos();
  // 実装
}

// ❌ 禁止パターン
import { supabase } from '@/shared/lib/supabase'; // 直接アクセス禁止
```

### API実装パターン
```typescript
// features/<name>/api.ts
export async function fetchItems(): Promise<Item[]> {
  const { data: user } = await supabase.auth.getUser();
  if (!user.user) {
    throw new Error('User not authenticated');
  }

  const { data, error } = await supabase
    .from('items')
    .select('*')
    .eq('user_id', user.user.id);

  if (error) {
    throw new Error(`Failed to fetch items: ${error.message}`);
  }

  return data ?? [];
}
```

---

## 3. 軽量タスク用プロセス 🟢

### 簡易分析
- タスク概要を1-2文で要約
- Feature-first制約チェック（どのフォルダを触るか）
- 実行ステップを3-5個に分割

### 実行と報告
```markdown
**実行中**: [⏳] `src/features/todo/components/TodoForm.tsx` 修正中...
**完了**: [✅] スタイル調整完了 - Tailwindクラス更新
```

---

## 4. 標準タスク用プロセス 🟡（Feature-first特化）

### タスク分析
- 機能名と所属フォルダ決定（`features/<name>/`）
- 必要なファイル一覧とその順序
- Supabaseテーブル要件確認
- React Query統合方針
- UIコンポーネント再利用可能性

### 実行計画（Feature-first対応）
```markdown
### 新機能: User Profile
1. [独立] `features/profile/types.ts` 🟢
2. [独立] `features/profile/schema.ts` 🟢
3. [依存:1] `features/profile/api.ts`
4. [依存:3] `features/profile/hooks.ts`
5. [並列] ProfileForm/ProfileDisplay components 🟢
6. [依存:5] `features/profile/index.ts`
7. [ブロッカー] `app/profile/page.tsx` ⛔
```

### 進捗表示
```markdown
**進行中**: [✅✅⏳⬜⬜⬜⬜] 2/7 完了 - 現在: API実装中
**Feature**: User Profile | **フォルダ**: `features/profile/`
```

---

## 5. 重要タスク用プロセス 🔴（データベース/セキュリティ）

### 自動承認トリガー（Vibe Coding固有）
以下に該当する場合は必須承認：
- Supabaseテーブル作成・スキーマ変更
- RLS（Row Level Security）ポリシー変更
- 認証フロー変更
- Feature-first構造の大幅変更
- 外部ライブラリ追加（React/TypeScript/Vite/Supabase/Tailwind以外）

### 段階実行（データベース変更例）
```markdown
### フェーズ1: 準備
- Supabaseプロジェクト確認
- 現在のスキーマバックアップ
- 型ファイル（`shared/types/supabase.ts`）バックアップ

### フェーズ2: 実装
- SQLマイグレーション実行
- RLSポリシー設定
- 型ファイル再生成

### フェーズ3: 検証
- API動作確認
- 認証テスト
- Feature統合テスト
```

---

## 6. エラー処理の段階化（TypeScript特化）

### エラー分類と自動対応
```markdown
🟢 **警告レベル**: 記録して継続
   - Tailwind未使用クラス警告
   - import順序警告（eslint-plugin-import）

🟡 **エラーレベル**: 自動リトライ後に報告
   - TypeScript型エラー
   - Zodバリデーションエラー
   - 3回まで自動修正試行

🔴 **致命的レベル**: 即座停止、承認待ち
   - any型の使用検出
   - Supabase直アクセス検出
   - Feature-first違反

⛔ **セキュリティレベル**: 全作業停止、緊急報告
   - 環境変数の平文記載
   - RLS回避コード
```

---

## 7. Vibe Coding 固有の品質管理

### 段階的検証
```markdown
### 軽量タスク
- TypeScript型チェック
- Prettier整形確認

### 標準タスク
- Feature内の型安全性確認
- React Query動作確認
- UIコンポーネント動作確認

### 重要タスク
- Feature間の独立性確認
- Supabase RLS動作確認
- 認証フロー確認
- ビルド・デプロイ確認
```

### Linterエラー対応（プロジェクト固有）
```markdown
🟢 **自動修正**: Prettier, import順序, Tailwind順序
🟡 **修正提案**: TypeScript型エラー, 未使用変数
🔴 **手動対応**: any型使用, アーキテクチャ違反

**特別対応**: 
- `@typescript-eslint/no-explicit-any`: エラー強制停止
- Feature-first違反: 手動再設計が必要
```

---

## 8. プロジェクト固有の報告フォーマット

### 標準タスク報告（Feature作成）
```markdown
## Feature作成完了: User Profile

**フォルダ**: `features/profile/`
**作成ファイル**: 7個（types, schema, api, hooks, components×2, index）
**所要時間**: 12分
**Supabaseテーブル**: `profiles` (作成済み)
**ページ**: `/profile` (統合完了)

**注意点**: 
- アバター画像はSupabaseストレージ連携
- プロフィール更新はリアルタイム反映
```

### 重要タスク報告（データベース変更）
```markdown
# データベーススキーマ変更完了

## 概要
Todoテーブルに`priority`カラムを追加、RLSポリシー更新

## 実行フェーズ
1. **準備フェーズ**: スキーマバックアップ完了
2. **実装フェーズ**: Migration実行、型ファイル再生成
3. **検証フェーズ**: API動作確認、Feature統合テスト完了

## Feature影響評価
- **`features/todo/`**: types.ts, api.ts, hooks.ts更新済み
- **UI**: TodoFormにPriority選択追加
- **互換性**: 既存データに影響なし

## ロールバック手順
```sql
ALTER TABLE todos DROP COLUMN priority;
-- 型ファイル復元: git checkout HEAD~1 src/shared/types/supabase.ts
```
```

---

## 9. Vibe Coding 学習支援

### 初心者向け説明
```markdown
## 🎓 初心者向け解説

**今回の作業**: User Profile機能を追加
**学習ポイント**: 
- Feature-first: 機能ごとにフォルダ分け
- 型安全: TypeScript + Zodで実行時エラー防止
- データフロー: Supabase → API → React Query → UI

**次のステップ**: 
1. `features/profile/schema.ts`でバリデーション確認
2. `features/profile/hooks.ts`でReact Queryパターン学習
3. UIコンポーネントでTailwind CSS実践
```

### Vibeコーディング促進
```markdown
## 💡 Vibeコーディング Tips

**良いプロンプト例**:
- "todoと同じパターンでblog機能を作成"
- "ProfileFormにアバター画像アップロード機能を追加"

**避けるべきプロンプト**:
- "なんかいい感じにして" (具体性不足)
- "Supabaseを直接使って..." (アーキテクチャ違反)
```

---

## 10. 継続性とコンテキスト管理（プロジェクト特化）

### Feature開発の中断・再開
```markdown
## Feature開発状況: User Profile
**完了**: types.ts, schema.ts, api.ts
**進行中**: hooks.ts（80%完了 - useUpdateProfile実装中）
**未着手**: ProfileForm, ProfileDisplay, page統合
**Supabase状態**: profilesテーブル作成済み、RLSポリシー設定済み
**再開手順**: `features/profile/hooks.ts`のuseUpdateProfile実装継続
```

---

## 11. 重要な注意事項（Vibe Coding固有）

### 基本原則
- **Feature-first遵守**: 機能単位の独立性維持
- **型安全最優先**: any型は一切使用しない
- **学習効率**: 初心者が理解しやすいパターン統一
- **AIフレンドリー**: 一貫したパターンでAI支援を最大化

### 禁止事項（プロジェクト固有）
- **Feature間の直接import**（shared以外）
- **コンポーネントでのSupabase直接使用**
- **環境変数の直接参照**（env.ts経由必須）
- **any型によるエラー回避**
- **アーキテクチャの勝手な変更**

### 承認が必要な判断（Vibe Coding固有）
- Supabaseスキーマ・RLS変更
- Feature-first構造の変更
- 新しい技術スタックの導入
- セキュリティ関連の変更
- 学習体験に影響する大幅な変更

---

このルールに従って、**Vibe Coding Starter**プロジェクトの特性を活かし、初心者がAIと協力して効率的に学習できる環境を維持しながら、高品質なコードを生産してください。

**重要**: 全ての変更は**Feature-first Liteアーキテクチャ**に準拠し、初心者の学習体験を最優先に考慮してください。